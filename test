#!/bin/bash
set -o nounset 
#
# LAST_UPDATE="26 Nov 2012 16:33"
#
FULL_SCRIPT_PATH=$(dirname $(readlink -f "$0"))
# Wizard
if [ -f "${FULL_SCRIPT_PATH}/wizard.sh" ]; then
    declare -i RUN_LOCALIZER=0
    declare -r LOCALIZED_PATH="${FULL_SCRIPT_PATH}/locale"
    declare LOCALIZED_FILE="arch-wizard.sh"
    #. "${FULL_SCRIPT_PATH}/wizard.sh"
    source "${FULL_SCRIPT_PATH}/wizard.sh"
else
    echo "ERROR FILE NOT FOUND: - ${FULL_SCRIPT_PATH}/wizard.sh"
    exit 1
fi
# Common Wizard
if [ -f "${FULL_SCRIPT_PATH}/common-wiz.sh" ]; then
    source "${FULL_SCRIPT_PATH}/common-wiz.sh"
else
    echo "ERROR - ${FULL_SCRIPT_PATH}/common-wiz NOT FOUND"
    exit 1
fi
#

declare -a PACKMANAGER_NAME=( "1" "2" "3" "4" "5" "6"  )
declare -i ARR_INDEX=3

is_in_this_array()
{
    local -a array=("${!1}")          # Cast as Array 'array[@]'
    local -i total=0                  # Total in Array
    eval "total=\${#$1[@]}"
    local -i i=0
    for (( i=0; i<${total}; i++ )); do  # Iterate Array
        if [ "$2" == "${array[$i]}" ]; then
            ARR_INDEX="$i" # used if you want to know what the index is
            echo "Found ${array[$i]} - $i"
            return 0 # Return true
        fi
    done
    echo "Not Found"
    return 1 # Return false
}

# -------------------------------------
remove_from_array()
{
    if [ "$#" -ne "2" ]; then echo "ADD-PACKAGEMANAGER-ERROR"; exit 1; fi
    # Check to see if its in Array    
    if is_in_array "$1[@]" "$2" ; then
        eval "array=(\${$1[@]})"
        eval "$1=(${array[@]:0:$ARR_INDEX} ${array[@]:$(($ARR_INDEX + 1))})"
        return 0
    fi
    return 1
}
#}}}

echo "Before"
echo "${PACKMANAGER_NAME[@]}"
echo "***"
declare -i total="${#PACKMANAGER_NAME[@]}"
declare -i index=0
for (( index=0; index<${total}; index++ )); do
    echo ${PACKMANAGER_NAME[$index]}
done

remove_from_array "PACKMANAGER_NAME" "3"

echo "After"
echo "${PACKMANAGER_NAME[@]}"
echo "***"


declare -i total="${#PACKMANAGER_NAME[@]}"
declare -i index=0
for (( index=0; index<${total}; index++ )); do
    echo ${PACKMANAGER_NAME[$index]}
done

exit 0



# -----------------------------------------------------------------------------
# INSTALL MENU {{{
# USAGE      : install_menu
# DESCRIPTION: Install Menu
# NOTES      :
# AUTHOR     : helmuthdu and Flesher
# VERSION    : 1.0
# CREATED    : 1 OCT 2012
# REVISION   : 1 NOV 2012
install_menu()
{
    Debugit=0
    local StatusBar="Make a Choose:"
    declare -i total_menu_items=13    # You must define this first; since first run array doesn't exist, so its built using this number.
    if [[ "$Debugit" -eq 1 ]]; then
        total_menu_items=3    # You must define this first; since first run array doesn't exist, so its built using this number.
    fi
    declare -r menu_name="MainMenu"  # You must define Menu Name here
    #
    declare -a MenuChecks=( $(load_array "${MENU_PATH}/${menu_name}.db" "$total_menu_items" "0" ) ) # MENU_PATH is Global
    #
    if [[ "$Debugit" -eq 1 ]]; then
        echo "MenuChecks=${MenuChecks[@]}"
        print_line
        declare -a MenuItems=( "" )
        declare -a MenuInfo=( "" )
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 1"  "" ""           "Menu 1 Description."     "${MENU_PATH}/${menu_name}.db" 
        print_line
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 2"  "" ""           "Menu 2 Description."     "${MENU_PATH}/${menu_name}.db" 
        print_line
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 3"  "" ""           "Menu 3 Description."     "${MENU_PATH}/${menu_name}.db" 
        exit 0
    fi
    #
    while [[ 1 ]]; do
        #
        print_title "Main Menu for Arch Wizzard Installation Script"
        echo -e "${SPACE}${SPACE}${SPACE}${BYellow}${StatusBar}${White}"
        print_line
        declare -a MenuItems=( "" )
        declare -a MenuInfo=( "" )
        #
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 1"  "" ""           "Menu 1 Description."     "${MENU_PATH}/${menu_name}.db" 
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 2"  "" ""           "Menu 2 Description."     "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 3"  "Yellow" "Red"  "Menu 3 Description."     "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 4"  "Yellow" "Red"  "Menu 4 Description."     "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 5"  "Yellow" "Red"  "Menu 5 Description."     "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 6"  "Yellow" "Red"  "Menu 6 Description."     "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 7"  "Yellow" "Red"  "Menu 7 Description."     "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 8"  "Yellow" "Red"  "Menu 8 Description."     "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 9"  "Yellow" "Red"  "Menu 9 Description."     "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 10" "Yellow" "Red"  "Menu 10 Description."    "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 11" "Yellow" "Red"  "Menu 11 Description."    "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Menu 12" "Yellow" "Red"  "Menu 12 Description."    "${MENU_PATH}/${menu_name}.db"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "Quit"    "Yellow" "Red"  "Quit: Exit Application." "${MENU_PATH}/${menu_name}.db"
        #
        print_menu "MenuItems[@]" "MenuInfo[@]" "Q"
        #
        MAIN_MENU+=" q"
        read_input_options "$MAIN_MENU"
        for OPT in ${OPTIONS[@]}; do
            case "$OPT" in
                1)
                    if [[ "${MenuChecks[$(($OPT - 1))]}" -eq 0 ]]; then
                        MenuChecks[$(($OPT - 1))]=1
                        echo "$OPT 1"
                        StatusBar="$OPT"
                    else
                        MenuChecks[$(($OPT - 1))]=0
                        echo "$OPT 0"
                        StatusBar="$OPT"
                    fi
                    ;;
                2)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
                3)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
                4)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
                5)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
                6)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
                7)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
                8)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
                9)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
               10)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
               11)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
               12)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
               13)
                    MenuChecks[$(($OPT - 1))]=1
                    echo "$OPT"
                    StatusBar="$OPT"
                    ;;
                    
              "q")
                    if save_array "MenuChecks[@]" "${MENU_PATH}" "${menu_name}.db" ; then
                        SAVED_MAIN_MENU=1
                        return 1
                    fi
                    break
                    ;;
                *)
                    invalid_option "$OPT"
                    ;;
            esac
        done
        is_breakable "$OPT" "q"
    done
}
#}}}

install_menu

exit 0


hostcache=0

while getopts ':C:cdGiM' flag; do
  case $flag in
    C)
      pacman_config=$OPTARG
      ;;
    d)
      directory=1
      ;;
    c)
      hostcache=1
      ;;
    i)
      interactive=1
      ;;
    G)
      copykeyring=0
      ;;
    M)
      copymirrorlist=0
      ;;
    :)
      die '%s: option requires an argument -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
    ?)
      die '%s: invalid option -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
  esac
done
shift $(( OPTIND - 1 ))

if (( ! hostcache )); then
  echo "true"
else
  echo "false"
fi

exit 0

test_func()
{
    echo "$# parameters";
    
    echo Using '$*';
    for p in $*; do
        echo "[$p]";
    done;
    
    echo Using '"$*"';
    for p in "$*"; do
        echo "[$p]";
    done;
    
    echo Using '$@';
    for p in $@; do
        echo "[$p]";
    done;
    
    echo Using '"$@"';
    for p in "$@"; do
        echo "[$p]";
    done;
    
    check_arg "test_func" "3" "${#@}" "$LINENO"
    
}
#test_func "1" "" " " 

make_dir "$LOG_PATH" "$LINENO"
make_dir "$MENU_PATH" "$LINENO"
make_dir "$CONFIG_PATH" "$LINENO"
#copy_file "${ERROR_LOG}"    "${ERROR_LOG}.last.log"    "$LINENO"
#copy_file "${ACTIVITY_LOG}" "${ACTIVITY_LOG}.last.log" "$LINENO"
echo "# Error Log: $SCRIPT_NAME Version: $SCRIPT_VERSION on $DATE_TIME." > "$ERROR_LOG"
echo "# Log: $SCRIPT_NAME Version: $SCRIPT_VERSION on $DATE_TIME."  > "$ACTIVITY_LOG"



declare -a MenuChecks=( 0 0 0 )

myChecks()
{
    declare -a argAry1=("${!1}")
    echo "argAry1=${argAry1[@]}"    
}

myChecks "${MenuChecks[@]}"


exit 0

myLogic()
{
    return 0
}

if myLogic ; then
    echo "If"
else
    echo "If Not"
fi

echo "COUNTRY_CODE=$COUNTRY_CODE"


echo "++"
COUNTRY="${COUNTRIES[$(get_index "COUNTRY_CODES[@]" "$COUNTRY_CODE")]}"
echo "COUNTRY=$COUNTRY"
echo "++"

if is_in_array "COUNTRY_CODES[@]" "$COUNTRY_CODE" ; then
    echo "Found"
else
    echo "Not Found"
fi

