#!/bin/bash
#
# LAST_UPDATE="17 Dec 2012 16:33"
#
ARCH_WIZ_SCRIPT_NAME="Arch Wizard"
#
FULL_SCRIPT_PATH=$(dirname $(readlink -f "$0"))
# Wizard
if [ -f "${FULL_SCRIPT_PATH}/wizard.sh" ]; then
    declare -i RUN_LOCALIZER=0
    declare -r LOCALIZED_PATH="${FULL_SCRIPT_PATH}/locale"
    declare LOCALIZED_FILE="arch-wizard.sh"
    #. "${FULL_SCRIPT_PATH}/wizard.sh"
    source "${FULL_SCRIPT_PATH}/wizard.sh"
else
    echo "ERROR FILE NOT FOUND: - ${FULL_SCRIPT_PATH}/wizard.sh"
    exit 1
fi
# Common Wizard
if [ -f "${FULL_SCRIPT_PATH}/common-wiz.sh" ]; then
    source "${FULL_SCRIPT_PATH}/common-wiz.sh"
else
    echo "ERROR - ${FULL_SCRIPT_PATH}/common-wiz NOT FOUND"
    exit 1
fi
# Arch Wizard
if [ -f "${FULL_SCRIPT_PATH}/arch-wiz.sh" ]; then
    source "${FULL_SCRIPT_PATH}/arch-wiz.sh"
else
    echo "ERROR FILE NOT FOUND: - ${FULL_SCRIPT_PATH}/arch-wiz.sh"
    exit 1
fi
# Packages
if [ -f "${FULL_SCRIPT_PATH}/packages.sh" ]; then
    source "${FULL_SCRIPT_PATH}/packages.sh"
else
    echo "ERROR FILE NOT FOUND: - ${FULL_SCRIPT_PATH}/packages.sh"
    exit 1
fi
# Package Wizard
if [ -f "${FULL_SCRIPT_PATH}/package-wiz.sh" ]; then
    source "${FULL_SCRIPT_PATH}/package-wiz.sh"
else
    echo "ERROR FILE NOT FOUND: - ${FULL_SCRIPT_PATH}/package-wiz.sh"
    exit 1
fi
#
#-------------------------------------------------------------------------------
# This script will install Arch Linux, although it could be adapted to install any Linux distribution that uses the same package names.
# This Script Assumes you wish GPT disk format, and gives you the choice to use UEFI, BIOS or no boot loader.
# The first time you use it, call it with the -a or -da for debugging help if needed, this will start the Wizard, follow instructions.
# You have the Option of Installing Software, this is just a list of Configuration files, and will save a series of files for later use.
# After reboot you have the option to run -i to install software; you can load the Software list if you already saved it; or create a new one.
# If after reboot you have no Internet access, run the Script with a -n and pick option 1 to setup network, then the option to ping.
#-------------------------------------------------------------------------------
# Programmers:
# 1. Created by helmuthdu mailto: helmuthdu[at]gmail[dot]com prior to Nov 2012
# 2. Re-factored and Added Functionality by Jeffrey Scottconfigure_sudo Flesher to make it a Wizard.
#-------------------------------------------------------------------------------
# Changes:
#-------------------------------------------------------------------------------
# @FIX
# 1. Localization
# 2. Save all installed and removed into file for testing
# 3. Finish Menu load and save option.
# 4. Custom Install
# 5. Ask what drive to save log files to; only if live mode, case running from root, and want logs on flash drive.
#-------------------------------------------------------------------------------
# This Program is under the Free License. It is Free of any License or Laws Governing it.
# You are Free to apply what ever License you wish to it below this License.
# The Free License means that the End User has total Freedom will using the License,
# whereas all other License types fall short due to the Laws governing them,
# Free License is not covered by any Law, all programmers writing under the Free License,
# take an oath that the Software Contains No Malice: Viruses, Malware, or Spybots...
# and only does what it was intended to do, notifying End Users before doing it.
# All Programmers and End Users are Free to Distribute or Modify this script,
# as long as they list themselves as Programmers and Document Changes.
# Free License is also Free of any Liability or Legal Actions, Freedom starts with Free.
#-------------------------------------------------------------------------------
# Other LICENSES:
# 1. GNU
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# -----------------------------------------------------------------------------
# TEST {{{
NAME="test"
USAGE="test"
DESCRIPTION=$(localize "TEST-DESC")
NOTES=$(localize "TEST-NOTES")
AUTHOR="Flesher"
VERSION="1.0"
CREATED="11 SEP 2012"
REVISION="5 Dec 2012"
create_help "$NAME" "$USAGE" "$DESCRIPTION" "$NOTES" "$AUTHOR" "$VERSION" "$CREATED" "$REVISION" "$(basename $BASH_SOURCE) : $LINENO"
# Help file Localization
localize_info "TEST-DESC"  "Test functions out for Developers"
localize_info "TEST-NOTES" "Put what ever code in there you want to Test."
# -------------------------------------
test()
{
    #
    if [[ "$DEBUGGING" -eq 1 ]]; then pause_function "Test @ $(basename $BASH_SOURCE) : $LINENO"; fi
}
#}}}
# -----------------------------------------------------------------------------
# CONFIG MENU {{{
NAME="config_menu"
USAGE="config_menu"
DESCRIPTION=$(localize "CONFIG-MENU-DESC")
NOTES=$(localize "CONFIG-MENU-NOTES")
AUTHOR="Flesher"
VERSION="1.0"
CREATED="11 SEP 2012"
REVISION="5 Dec 2012"
create_help "$NAME" "$USAGE" "$DESCRIPTION" "$NOTES" "$AUTHOR" "$VERSION" "$CREATED" "$REVISION" "$(basename $BASH_SOURCE) : $LINENO"
# Help file Localization
localize_info "CONFIG-MENU-DESC"               "Configuration Menu gives access to all Configuration Files."
localize_info "CONFIG-MENU-NOTES"              "Fast place to make changes and verify Settings."
# Menu Localization
localize_info "CONFIG-MENU-CREATE-CONF"        "Create Config"
localize_info "CONFIG-MENU-EDIT-CONF"          "Edit Config"
localize_info "CONFIG-MENU-BACKUP-CONF"        "Backup Config"
localize_info "CONFIG-MENU-RESTORE-CONF"       "Restore Config"
localize_info "CONFIG-MENU-CUSTOM-NAMESERVER"  "Custom Nameserver"
localize_info "CONFIG-MENU-WEB-SERVER"         "Web Server"
localize_info "CONFIG-MENU-FLESH"              "Flesh"
localize_info "CONFIG-MENU-RETURN"             "Return"
# Menu Description Localization
localize_info "CONFIG-MENU-DESC-CREATE"        "Create all Configuration files"
localize_info "CONFIG-MENU-DESC-EDIT"          "Edit all etc Configuration files"
localize_info "CONFIG-MENU-DESC-BACKUP"        "Backup all Configuration files from Hard Drive to Flash Drive."
localize_info "CONFIG-MENU-DESC-RESTORE"       "Restore all Configuration files from Flash Drive."
localize_info "CONFIG-MENU-DESC-C-NAMESERVERS" "Edit Custom Nameserver File and resolv.conf"
localize_info "CONFIG-MENU-DESC-WEB-SERVER"    "Web Server Configuration"
localize_info "CONFIG-MENU-DESC-FLESH"         "Flesh Configuration Files"
localize_info "CONFIG-MENU-DESC-RETURN"        "Return to Main Menu"
# Status bar Localization
localize_info "Make-Choose"                    "Make a Choose:"
localize_info "CONFIG-MENU-SB-CREATE"          "Create Configuration files Completed."
localize_info "CONFIG-MENU-SB-EDIT"            "Edit etc Configuration files Completed."
localize_info "CONFIG-MENU-SB-BACKUP"          "Backup Completed."
localize_info "CONFIG-MENU-SB-RESTORE"         "Restore Completed."
localize_info "CONFIG-MENU-SB-C-NAMESERVERS"   "Custom Name Servers Completed"
localize_info "CONFIG-MENU-SB-WEB-SERVER"      "Web Server Completed."
localize_info "CONFIG-MENU-SB-FLESH"           "Flesh Completed"
# Title Localization
localize_info "CONFIG-MENU-TITLE" "Configuration Menu"
# Localization
localize_info "" ""
localize_info "" ""
#
localize_info "EDIT-HOSTS"         "Edit Configuration file /etc/hosts"
localize_info "EDIT-FSTAB"         "Edit Configuration file /etc/fstab"
localize_info "EDIT-DHCPCD"        "Edit Configuration file /etc/dhcpcd.conf"
localize_info "EDIT-DHCPD"         "Edit Configuration file /etc/conf.d/dhcpd"
localize_info "EDIT-LOCALE-CONF"   "Edit Configuration file /etc/locale.conf"
localize_info "EDIT-LOCALE-GEN"    "Edit Configuration file /etc/locale.gen"
localize_info "EDIT-PACMAN-MIRROR" "Edit Configuration file /etc/pacman.d/mirrorlist"
localize_info "EDIT-SUDOERS"       "Edit Configuration file /etc/sudoers"
localize_info "EDIT-RESOLV"        "Edit Configuration file /etc/resolv.conf"
localize_info "EDIT-SSH"           "Edit Configuration file /etc/ssh/sshd_config"
localize_info "EDIT-VCONSOLE"      "Edit Configuration file /etc/vconsole.conf"
localize_info "EDIT-PACMAN"        "Edit Configuration file /etc/pacman.conf"
localize_info "EDIT-HOSTNAME"      "Edit Configuration file /etc/hostname"
# -------------------------------------
config_menu()
{
    local -r menu_name="Config-Menu"  # You must define Menu Name here
    local BreakableKey="B" 
    # No reason to save menu
    #local -a MenuChecks=( $(load_array "${MENU_PATH}" "${menu_name}.db" "1" "0" ) ) # MENU_PATH is Global
    local -a MenuChecks=( $(create_data_array 0 0 ) ) # 
    #
    while [[ 1 ]]; do
        #
        print_title "CONFIG-MENU-TITLE" "$TEXT_SCRIPT_ID"
        print_caution "${StatusBar}" "${StatusBar2}"
        #
        declare -a MenuItems=( "" )
        declare -a MenuInfo=( "" )
        RESET_MENU=1
        #
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "CONFIG-MENU-CREATE-CONF"       "" "" "CONFIG-MENU-DESC-CREATE"        "MenuTheme[@]"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "CONFIG-MENU-EDIT-CONF"         "" "" "CONFIG-MENU-DESC-EDIT"          "MenuTheme[@]"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "CONFIG-MENU-BACKUP-CONF"       "" "" "CONFIG-MENU-DESC-BACKUP"        "MenuTheme[@]"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "CONFIG-MENU-RESTORE-CONF"      "" "" "CONFIG-MENU-DESC-RESTORE"       "MenuTheme[@]"   
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "CONFIG-MENU-CUSTOM-NAMESERVER" "" "" "CONFIG-MENU-DESC-C-NAMESERVERS" "MenuTheme[@]"   
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "CONFIG-MENU-WEB-SERVER"        "" "" "CONFIG-MENU-DESC-WEB-SERVER"    "MenuTheme[@]"   
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "CONFIG-MENU-FLESH"             "" "" "CONFIG-MENU-DESC-FLESH"         "MenuTheme[@]"   
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "CONFIG-MENU-RETURN"            "" "" "CONFIG-MENU-DESC-RETURN"        "MenuTheme[@]"   
        #
        print_menu "MenuItems[@]" "MenuInfo[@]" "$BreakableKey"
        #
        MAIN_MENU+=" "
        read_input_options "$MAIN_MENU"
        for M_OPT in ${OPTIONS[@]}; do
            case "$M_OPT" in
                1)  # View Config
                    MenuChecks[$(($M_OPT - 1))]=1

                    create_config
                    
                    StatusBar=$(localize "CONFIG-MENU-SB-CREATE")
                    ;;
                2)  # Edit Config
                    MenuChecks[$(($M_OPT - 1))]=1
                    
                    cat ${MOUNTPOINT}/etc/pacman.conf
                    read_input_yn "EDIT-PACMAN" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        $EDITOR ${MOUNTPOINT}/etc/pacman.conf
                    fi
                    pause_function "/etc/pacman.conf $LINENO"
                    #
                    cat ${MOUNTPOINT}/etc/pacman.d/mirrorlist
                    read_input_yn "EDIT-PACMAN-MIRROR" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        $EDITOR ${MOUNTPOINT}/etc/pacman.d/mirrorlist
                    fi
                    pause_function "/etc/pacman.d/mirrorlist $LINENO"
                    #
                    cat ${MOUNTPOINT}/etc/fstab
                    read_input_yn "EDIT-FSTAB" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        $EDITOR ${MOUNTPOINT}/etc/fstab
                    fi
                    pause_function "/etc/fstab $LINENO"
                    #
                    cat ${MOUNTPOINT}/etc/hosts
                    read_input_yn "EDIT-HOSTS" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        $EDITOR ${MOUNTPOINT}/etc/hosts
                    fi
                    pause_function "/etc/hosts $LINENO"
                    #
                    cat ${MOUNTPOINT}/etc/hostname
                    pause_function "/etc/hostname $LINENO"
                    read_input_yn "EDIT-HOSTNAME" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        $EDITOR ${MOUNTPOINT}/etc/hostname
                    fi
                    pause_function "/etc/hostname $LINENO"
                    #
                    cat ${MOUNTPOINT}/etc/locale.conf
                    read_input_yn "EDIT-LOCALE-CONF" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        $EDITOR ${MOUNTPOINT}/etc/locale.conf
                    fi
                    pause_function "/etc/locale.conf $LINENO"
                    #
                    cat ${MOUNTPOINT}/etc/locale.gen
                    read_input_yn "EDIT-LOCALE-GEN" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        $EDITOR ${MOUNTPOINT}/etc/locale.gen
                    fi
                    pause_function "/etc/locale.gen $LINENO"
                    #
                    cat ${MOUNTPOINT}/etc/sudoers
                    read_input_yn "EDIT-SUDOERS" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        $EDITOR ${MOUNTPOINT}/etc/sudoers
                    fi
                    pause_function "/etc/sudoers $LINENO"
                    #
                    cat ${MOUNTPOINT}/etc/resolv.conf
                    read_input_yn "EDIT-RESOLV" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        chattr -i ${MOUNTPOINT}/etc/resolv.conf
                        $EDITOR ${MOUNTPOINT}/etc/resolv.conf
                        chattr +i ${MOUNTPOINT}/etc/resolv.conf
                    fi
                    pause_function "/etc/resolv.conf $LINENO"
                    #
                    if [ -f ${MOUNTPOINT}/etc/conf.d/dhcpd ]; then
                        cat ${MOUNTPOINT}/etc/conf.d/dhcpd
                        read_input_yn "EDIT-DHCPD" " " 0
                        if [[ "$YN_OPTION" -eq 1 ]]; then
                            $EDITOR ${MOUNTPOINT}/etc/conf.d/dhcpd
                        fi
                        pause_function "/etc/conf.d/dhcpd $LINENO"
                    fi
                    #
                    if [ -f ${MOUNTPOINT}/etc/dhcpcd.conf ]; then
                        cat ${MOUNTPOINT}/etc/dhcpcd.conf
                        read_input_yn "EDIT-DHCPCD" " " 0
                        if [[ "$YN_OPTION" -eq 1 ]]; then
                            $EDITOR ${MOUNTPOINT}/etc/dhcpcd.conf
                        fi
                        pause_function "/etc/dhcpcd.conf $LINENO"
                    fi
                    #
                    if [ -f ${MOUNTPOINT}/etc/ssh/sshd_config ]; then
                        cat ${MOUNTPOINT}/etc/ssh/sshd_config
                        read_input_yn "EDIT-SSH" " " 0
                        if [[ "$YN_OPTION" -eq 1 ]]; then
                            $EDITOR ${MOUNTPOINT}/etc/ssh/sshd_config
                        fi
                        pause_function "/etc/ssh/sshd_config $LINENO"
                    fi
                    #
                    cat ${MOUNTPOINT}/etc/vconsole.conf
                    read_input_yn "EDIT-VCONSOLE" " " 0
                    if [[ "$YN_OPTION" -eq 1 ]]; then
                        $EDITOR ${MOUNTPOINT}/etc/vconsole.conf
                    fi
                    pause_function "/etc/vconsole.conf $LINENO"

                    StatusBar=$(localize "CONFIG-MENU-SB-EDIT")
                    break
                    ;;
                3)  # Backup Config
                    MenuChecks[$(($M_OPT - 1))]=1
                    
                    backup
                    
                    StatusBar=$(localize "CONFIG-MENU-SB-BACKUP")
                    ;;
                4)  # Restore Config
                    MenuChecks[$(($M_OPT - 1))]=1
                    
                    copy_dir "$SCRIPT_DIR/etc/" "/" "$(basename $BASH_SOURCE) : $LINENO"
                    
                    StatusBar=$(localize "CONFIG-MENU-SB-RESTORE") 
                    ;;
                5)  # Custom Nameservers
                    MenuChecks[$(($M_OPT - 1))]=1
                    DEBUGGING=1
                    custom_nameservers
                    StatusBar=$(localize "CONFIG-MENU-SB-C-NAMESERVERS")
                    ;;
                6)  # Web Server
                    MenuChecks[$(($M_OPT - 1))]=1
                    StatusBar=$(localize "CONFIG-MENU-SB-WEB-SERVER")
                    ;;
                7)  # Flesh
                    MenuChecks[$(($M_OPT - 1))]=1
                    StatusBar=$(localize "CONFIG-MENU-SB-FLESH")
                    break;
                    ;;
                8)  # Return; same as Quit
                    MenuChecks[$(($M_OPT - 1))]=1
                    M_OPT="$BreakableKey"
                    break;
                    ;;
                *)
                    if [[ $(to_lower_case "$M_OPT") == $(to_lower_case "$BreakableKey") ]]; then
                        M_OPT="$BreakableKey"
                        break;
                    fi
                    invalid_option "$M_OPT"
                    StatusBar=$(localize "INVALID_OPTION")
                    ;;
            esac
        done
        is_breakable "$M_OPT" "$BreakableKey"
    done
}
#}}}
# -----------------------------------------------------------------------------
# MAIN MENU {{{
NAME="main_menu"
USAGE="main_menu"
DESCRIPTION=$(localize "MAIN-MENU-DESC")
NOTES=$(localize "MAIN-MENU-NOTES")
AUTHOR="Flesher"
VERSION="1.0"
CREATED="11 SEP 2012"
REVISION="5 Dec 2012"
create_help "$NAME" "$USAGE" "$DESCRIPTION" "$NOTES" "$AUTHOR" "$VERSION" "$CREATED" "$REVISION" "$(basename $BASH_SOURCE) : $LINENO"
# Help file Localization
localize_info "MAIN-MENU-DESC"  "Main Menu"
localize_info "MAIN-MENU-NOTES" "Notes."
# Menu Localization
localize_info "MAIN-MENU-NEW-SOFTWARE"  "New Software Configure File"
localize_info "MAIN-MENU-INSTALL"       "Install Arch Linux"
localize_info "MAIN-MENU-LOAD-SOFTWARE" "Load Software Configuration File"
localize_info "MAIN-MENU-DEBUG-MODE"    "Debug Mode"
localize_info "MAIN-MENU-NETWORK"       "Network Troubleshooting."
localize_info "MAIN-MENU-CONFIG"        "Config"
localize_info "MAIN-MENU-TEST"          "Test"
localize_info "MAIN-MENU-REBOOT"        "Reboot"
localize_info "MAIN-MENU-QUIT"          "Quit"
# Menu Description Localization
localize_info "MAIN-MENU-DESC-SOFTWARE"      "Install Software: Will install Software Packages from Menu Driven Wizards."
localize_info "MAIN-MENU-DESC-INSTALL"       "Install Arch Linux: Format Hard Drive and Install Arch Linux."
localize_info "MAIN-MENU-DESC-LOAD-SOFTWARE" "Load Software: Will install Software Packages from above option."
localize_info "MAIN-MENU-DESC-DEBUG-MODE"    "Debug Mode: Adds Debugging Information and pauses; helps troubleshoot, Call first, i.e. 4 1 2"
localize_info "MAIN-MENU-DESC-NETWORK"       "Network Troubleshooting"
localize_info "MAIN-MENU-DESC-CONFIG"        "Configuration Files: View, Edit, Backup and Restore Configuration files."
localize_info "MAIN-MENU-DESC-TEST"          "Test: Put functions or Code that you wish to test here, for easy access."
localize_info "MAIN-MENU-DESC-REBOOT"        "Reboot: Reboot the Computer."
localize_info "MAIN-MENU-DESC-QUIT"          "Quit: Exit back to Command line"
# Menu Warning Description Localization
localize_info "MAIN-MENU-WARN-FORMAT" "Format Hard Drive"
# Status bar Localization
localize_info "MAIN-MENU-SB-SOFTWARE"      "Software and Configuration files are ready."
localize_info "MAIN-MENU-SB-INSTALL"       "Hard Drive ready for Reboot."
localize_info "MAIN-MENU-SB-LOAD-SOFTWARE" "Software Configuration Loaded."
localize_info "MAIN-MENU-SB-DEBUG-MODE"    "Debugging Mode set to On."
localize_info "MAIN-MENU-SB-NETWORK"       "Network Troubleshooting Completed"
localize_info "MAIN-MENU-SB-CONFIG"        "Configuration Files Completed."
localize_info "MAIN-MENU-SB-TEST"          "Test Completed."
# Title Localization
localize_info "MAIN-MENU-TITLE" "Main Menu for Arch Wizard Installation Script"
#
localize_info "MM-INFO-1" "This is the Wizards way of installing an Arch OS in 3 Steps:"
localize_info "MM-INFO-2" "1. Configure our Settings Data, which include our:"
localize_info "MM-INFO-3" "   A. User Session: this includes User Name, Locale, Time Zone, and other User Specific Settings."
localize_info "MM-INFO-4" "   B. Software: this includes Desktop Environment, Display Manager, and other Applications."
localize_info "MM-INFO-5" "   C. Disk Manager: this includes the Disk Boot Scheme, Partitions, and other Disk format options."
localize_info "MM-INFO-6" "2. Format Hard Drive, Install Bases System, and then do other options; like load a custom Repository."
localize_info "MM-INFO-7" "3. Install Software."
localize_info "MM-INFO-8" "First time use, Configure all settings, Wizard will guild you through all Steps, after its finished; you will reboot, then just run option to Load Software Configuration File."
localize_info "MM-INFO-9" "If you have an problems while running script; pick Debug Mode; it will give you pauses to see how each step is doing; also review error.log."
localize_info "INVALID_OPTION" "Invalid Option"
localize_info "MM-BOOT-MODE-DETECTED"   "Boot Mode Detected."
localize_info "MM-LIVE-MODE-DETECTED"   "Live Mode Detected."
# -------------------------------------
main_menu()
{
    local -r menu_name="MainMenu"  # You must define Menu Name here
    local BreakableKey="Q" 
    local -a MenuThemeWarn=( "${BRed}" "${White}" ")" )
    # No reason to save menu
    #local -a MenuChecks=( $(load_array "${MENU_PATH}" "${menu_name}.db" "1" "0" ) ) # MENU_PATH is Global
    local -a MenuChecks=( $(create_data_array 0 0 ) ) # 
    #
    if [ -d "/home/arch/" ]; then
        StatusBar="MM-BOOT-MODE-DETECTED"
    else
        StatusBar="MM-LIVE-MODE-DETECTED"
    fi
    #
    while [[ 1 ]]; do
        #
        print_title "MAIN-MENU-TITLE" "$TEXT_SCRIPT_ID"
        print_caution "${StatusBar}"
        #
        print_this "MM-INFO-1"
        print_this "MM-INFO-2"
        print_this "MM-INFO-3"
        print_this "MM-INFO-4"
        print_this "MM-INFO-5"
        print_this "MM-INFO-6"
        print_this "MM-INFO-7"
        echo 
        print_this "MM-INFO-8"
        print_this "MM-INFO-9"
        echo 
        
        declare -a MenuItems=( "" )
        declare -a MenuInfo=( "" )
        RESET_MENU=1
        #
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "MAIN-MENU-NEW-SOFTWARE"  "" ""                      "MAIN-MENU-DESC-SOFTWARE"      "MenuTheme[@]"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "MAIN-MENU-INSTALL"       "" "MAIN-MENU-WARN-FORMAT" "MAIN-MENU-DESC-INSTALL"       "MenuThemeWarn[@]"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "MAIN-MENU-LOAD-SOFTWARE" "" ""                      "MAIN-MENU-DESC-LOAD-SOFTWARE" "MenuTheme[@]"
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "MAIN-MENU-DEBUG-MODE"    "" ""                      "MAIN-MENU-DESC-DEBUG-MODE"    "MenuTheme[@]"   
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "MAIN-MENU-NETWORK"       "" ""                      "MAIN-MENU-DESC-NETWORK"       "MenuTheme[@]"   
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "MAIN-MENU-CONFIG"        "" ""                      "MAIN-MENU-DESC-CONFIG"        "MenuTheme[@]"   
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "MAIN-MENU-TEST"          "" ""                      "MAIN-MENU-DESC-TEST"          "MenuTheme[@]"   
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "MAIN-MENU-REBOOT"        "" ""                      "MAIN-MENU-DESC-REBOOT"        "MenuTheme[@]"   
        add_menu_item "MenuChecks" "MenuItems" "MenuInfo" "MAIN-MENU-QUIT"          "" ""                      "MAIN-MENU-DESC-QUIT"          "MenuTheme[@]"   
        #
        print_menu "MenuItems[@]" "MenuInfo[@]" "$BreakableKey"
        #
        MAIN_MENU+=" "
        read_input_options "$MAIN_MENU"
        for M_OPT in ${OPTIONS[@]}; do
            case "$M_OPT" in
                1)  # Install New Software
                    MenuChecks[$(($M_OPT - 1))]=1
                    set_debugging_mode 2 "$(basename $BASH_SOURCE) : $LINENO"
                    clear_software
                    verify_config 2
                    StatusBar=$(localize "MAIN-MENU-SB-SOFTWARE")
                    ;;
                2)  # Install OS
                    set_debugging_mode 1 "$(basename $BASH_SOURCE) : $LINENO"
                    MenuChecks[$(($M_OPT - 1))]=1
                    FAST_INSTALL=1
                    BOOT_MODE=1
                    # Assume Boot mode
                    verify_config 1
                    start_screen 
                    StatusBar=$(localize "MAIN-MENU-SB-INSTALL")
                    break
                    ;;
                3)  # Load Software
                    MenuChecks[$(($M_OPT - 1))]=1
                    set_debugging_mode 2 "$(basename $BASH_SOURCE) : $LINENO"
                    verify_config 2
                    if [[ "$PACMAN_REPO_TYPE" -eq 0 ]]; then # 0=None, 1=Server, 2=Client
                        echo "No Repository"
                    elif [[ "$PACMAN_REPO_TYPE" -eq 1 ]]; then # 1=Server
                        if [ ! -d "/mnt/${CUSTOM_PACKAGES_NAME}/" ]; then
                            copy_custom_repo "${CUSTOM_PACKAGES}" "${CUSTOM_REPO_NAME}" "/mnt/${CUSTOM_PACKAGES_NAME}/"                        
                        fi
                    elif [[ "$PACMAN_REPO_TYPE" -eq 2 ]]; then # 2=Client
                        echo "mount repo"
                    fi
                    DRIVE_FORMATED=1
                    install_loaded_software
                    StatusBar=$(localize "MAIN-MENU-SB-LOAD-SOFTWARE")
                    ;;
                4)  # Debug mode
                    MenuChecks[$(($M_OPT - 1))]=1
                    DEBUGGING=1
                    StatusBar=$(localize "MAIN-MENU-SB-DEBUG-MODE") 
                    ;;
                5)  # Network
                    MenuChecks[$(($M_OPT - 1))]=1
                    DEBUGGING=1
                    network_troubleshooting
                    StatusBar=$(localize "MAIN-MENU-SB-NETWORK")
                    ;;
                6)  # Config
                    MenuChecks[$(($M_OPT - 1))]=1
                    DEBUGGING=1
                    verify_config 2
                    config_menu
                    StatusBar=$(localize "MAIN-MENU-SB-CONFIG")
                    ;;
                7)  # Test
                    MenuChecks[$(($M_OPT - 1))]=1
                    DEBUGGING=1
                    test
                    StatusBar=$(localize "MAIN-MENU-SB-TEST")
                    ;;
                8)  # Reboot
                    MenuChecks[$(($M_OPT - 1))]=1
                    reboot
                    break;
                    ;;
                9)  # Quit
                    MenuChecks[$(($M_OPT - 1))]=1
                    M_OPT="$BreakableKey"
                    break;
                    ;;
                *)
                    if [[ $(to_lower_case "$M_OPT") == $(to_lower_case "$BreakableKey") ]]; then
                        M_OPT="$BreakableKey"
                        break;
                    fi
                    invalid_option "$M_OPT"
                    StatusBar=$(localize "INVALID_OPTION")
                    ;;
            esac
        done
        is_breakable "$M_OPT" "$BreakableKey"
    done
}
#}}}
# -----------------------------------------------------------------------------
#
if [[ "$RUN_LOCALIZER" -eq 1 ]]; then
    localize_save
    print_help
else
    cls
    clear_logs
    main_menu
fi
# End of Script ***********
